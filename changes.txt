settings.py =>
INSTALLED_APPS = [
    
    'rest_framework',
    'todoapp.apps.TodoappConfig',    
]

urls.py(project directory) =>

from django.urls import path, include
from todoapp import urls

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include(urls))
]

urls.py(app)=>
from todoapp import views

urlpatterns = [
    path('index/',views.newindex, name = "newindex_page"),
    path('list/',views.tasklist, name = "tasklist"), 
    path('one/<str:pk>/',views.one, name = "taskone"),  
    path('add/',views.add, name = "taskadd"),
    path('update/<str:pk>/',views.update, name = "task"),
    path('delete/<str:pk>',views.delete, name = "delete"),
    
]

views.py=>

from django.shortcuts import render
from django.http import HttpResponse
from django.http import JsonResponse

from rest_framework.response import Response
from rest_framework.decorators import api_view
from .serializer import TaskSerializer
from .models import Task
# Create your views here.



@api_view(['GET'])
def newindex(request):
    urls = {
        't1' : 'eat/',
        't2' : 'sleep/',
        't3' : 'drink/',
        't4' : 'run/',
    }

    return Response(urls)

@api_view(['GET'])
def tasklist(request):
    task = Task.objects.all()
    serializer = TaskSerializer(task, many = True)
    return Response(serializer.data)

@api_view(['GET'])
def one(request, pk):
    task = Task.objects.get(id = pk)
    serializer = TaskSerializer(task, many = False)
    return Response(serializer.data)

@api_view(['POST'])
def add(request):
   
    serializer = TaskSerializer(data = request.data)
    if serializer.is_valid():
        serializer.save()
    return Response(serializer.data)

@api_view(['POST'])
def update(request,pk):
    task = Task.objects.get(id=pk)
    serializer = TaskSerializer(instance=task, data = request.data)
    
    if serializer.is_valid():
        serializer.save()
    return Response(serializer.data)

@api_view(['DELETE'])
def delete(request,pk):
    task = Task.objects.get(id=pk)
    task.delete()
    return Response("Item successfully deleted")
    
    
serializers.py=>

from rest_framework import serializers
from .models import Task

class TaskSerializer(serializers.ModelSerializer):
    class Meta:
        model = Task
        fields = '__all__'
        
        
        
models.py=>
from django.db import models

# Create your models here.
class Task(models.Model):
    title = models.CharField(max_length=200)
    completed = models.BooleanField(default=False, blank=True, null=True)

    def __str__(self):
        return self.title
